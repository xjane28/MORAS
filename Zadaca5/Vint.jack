class Vint{
    field int capacity;
    field Array vector;
    
    method int len(){
        return(capacity);
    }

    function int power(int x, int n){
        var int ret, temp;

        let ret = 1;
        let temp = 0;

        while(temp < n){
            let ret = Math.multiply(ret, x);
            let temp = temp + 1;
        }

        return ret;
    }

    constructor Vint new(int n){
        if(n < 0){
            let capacity = 1;
            let vector = Array.new(capacity);
            return this;
        }
        
        let capacity = Vint.power(2,n);
        let vector = Array.new(capacity);

        return this;
    }

    method void set(int k, int v){
        if((k = capacity) | (k > capacity) | (k < 0)){
            do Output.printString("Invalid input");
            do Output.println("");
            return;
        }

        let vector[k] = v;
        return;
    }

    method int get(int k){
        if((k = capacity) | (k > capacity) | (k < 0)){
            do Output.printString("Invalid input");
            do Output.println("");
            return(-1);
        }

        return vector[k];
    }

    method void resize(int m){
        var int minimum, i;
        var Array temp;
        
        let minimum = Math.min(capacity, Vint.power(2,m));
        let i = 0;
        let temp = Array.new(Vint.power(2,m));

        if(m < 0){
            do vector.dispose();
            let capacity = 1;
            let vector = Array.new(capacity);
            return;
        }

        while(i < minimum){
            let temp[i] = vector[i];
            let i = i + 1;
        }
        
        do vector.dispose();
        let capacity = Vint.power(2,m);
        let vector = temp;

        return;
    }

    function bool is_eq(Vint v1, Vint v2){
        var int i;

        let i = 0;

        if(~(v1.len() = v2.len())){
            return false;
        }

        while(i < v1.len()){
            if(~(v1.get(i) = v2.get(i))){
                return false;
            }
            let i = i + 1;
        }

        return true;
    }

    function bool elems(Vint v1, Vint v2){
        var int i,j;
        var Array v1_copy, v2_copy;
        
        let i = 0;
        let j = 0;
        let v1_copy = Array.new(v1.len());
        let v2_copy = Array.new(v2.len());

        if(~(v1.len() = v2.len())){
            return false;
        }

        while(i < v1.len()){
            let v1_copy[i] = v1.get(i);
            let v2_copy[i] = v2.get(i);
            let i = i + 1;
        }

        do quicksort.qsort(v1_copy, 0, v1.len() - 1);
        do quicksort.qsort(v2_copy, 0, v2.len() - 1);

        while(j < v1.len()){
            if(~(v1_copy[j] = v2_copy[j])){
                return false;
            }
            let j = j + 1;
        }

        return true;
    }

    method void print(){
        var int i;
        let i = 0;

        while(i < capacity){
            do Output.printInt(vector[i]);
            do Output.printString(" ");
            let i = i + 1;
        }

        do Output.println();

        return;
    }
    
}